// These are assumptions; they must be met by setProgramConstants*()
// WARNING: Although AGALMacroAssembler supports referring to one of these constants as a literal ("add ft0.x, ft0.x, 1")
//   it doesn't seem to support smearing such a reference: code like "add ft0.xy, ft0.xy, 1" seems to silently do the
//   wrong thing. In these cases you should use the register name or an alias and explicitly specify the components.
// TODO: Give meaningful names to these constants where appropriate.
alias fc0, CONST_0(1, 2, 0, 0.5);
alias fc1, CONST_1(3.1415926535, 180, 60, 120);
alias fc2, CONST_2(240, 3, 4, 5);
alias fc3, CONST_3(6, 0.11, 0.09, 0.001);
alias fc4, CONST_4(360, 1234567, 1234567, 1234567); // bogus values prevent the assembler from assuming zeroes

// These functions are missing from AGALMacroAssembler's "standard library"
macro cos(x) { cos out, x }
macro dp3(v1, v2) { dp3 out, v1, v2 }
macro frc(x) { frc out, x }
macro max(x, y) { max out, x, y }
macro min(x, y) { min out, x, y }
macro pow(x, y) { pow out, x, y }
macro sat(x) { sat out, x }
macro sin(x) { sin out, x }
macro sqt(x) { sqt out, x }

// These aliases are always used
// FX-related aliases are generated and prepended by AS3
alias v0.xyxy, Tex_uv
alias fc5.xyxy, Tex_u0v0
alias fc5.zwzw, Tex_wh

/*** Mosaic effect ***/
#if ENABLE_mosaic
ft0.xyzw = Tex_uv * FX_mosaic
ft0.xyzw = frc(ft0.xyzw)
#else
ft0.xyzw = Tex_uv
#endif

/*** Pixelate effect ***/
#if ENABLE_pixelate
// Do xy = int(xy / pixels) * pixels
ft2.xyzw = ft0.xyxy / FX_pixelate
ft1.xyzw = frc(ft2.xyzw)
ft2.xyzw -= ft1.xyzw
ft2.xyzw *= FX_pixelate

// Get the middle pixel
ft1.xy = FX_pixelate_half
// ft2.xyzw = ft2.xyxy + ft1.xyxy
ft0.xyzw = ft2.xyxy + ft1.xyxy

// Use the pixelated UV?
// ft1.x = FX_pixelate >= 0 // is pixelate_x >= 0?
// ft2.xyzw *= ft1.xxxx // then use the pixelated UV
// ft1.x = FX_pixelate < 0 // is pixelate_x < 0?
// ft0.xyzw *= ft1.xxxx // then use the pixelated UV
// ft0.xyzw += ft2.xyzw // Add them together
#endif // ENABLE_pixelate

/*** Whirl effect ***/
#if ENABLE_whirl
ft0.zw = fc0.zz
ft4.xyzw = ft0.xyzw
ft0.xy -= fc0.ww // ft0.xy = vec
ft1.y = dp3(ft0.xyz, ft0.xyz)
ft1.x = sqt(ft1.y) // ft.x = d, len(uv) from center of texture (0.5, 0.5)
ft1.y = ft1.x / 0.5 // radius = 0.5 (to the edge)
ft1.y = 1 - ft1.y // ft1.y = factor

ft1.z = ft1.y * ft1.y
ft1.z *= FX_whirl // ft1.z = a
ft2.x = sin(ft1.zzzz) // ft2.x = sinAngle
ft2.y = cos(ft1.zzzz) // ft2.y = cosAngle

ft2.z = ft0.x * ft2.y // ft2.z = vec.x * cosAngle
ft2.w = ft0.y * ft2.x // ft2.w = vec.y * sinAngle
ft3.xyzw = ft2.zzzz - ft2.wwww

ft2.z = ft0.x * ft2.x // ft2.z = vec.x * sinAngle
ft2.w = ft0.y * ft2.y // ft2.w = vec.y * cosAngle
ft3.y = ft2.z + ft2.w
ft3.xy += fc0.ww // ft3.y = p.y

ft1.y = ft1.x >= 0.5
ft4.xy *= ft1.yy
ft1.y = ft1.x < 0.5
ft0.xy = ft3.xy * ft1.yy
ft0.xy += ft4.xy

ft0.xy = sat(ft0.xy)
#endif // ENABLE_whirl

/*** Fisheye effect ***/
#if ENABLE_fisheye
ft1.xy = ft0.xy - fc0.ww // ft0.xy = vec = (uv - [0.5,0.5])
ft2.xy = ft1.xy / fc0.ww // vec = vec / [0.5, 0.5]
ft2.zw = fc0.zz
ft1.y = dp3(ft2.xyz, ft2.xyz) // ft1.y = length(vec)^2
ft1.x = sqt(ft1.y) // ft.x = length(vec)

// Prevent divide by zero
ft3.y = ft1.x == 0 //int len_eq_zero = (v == 0);
ft3.x = 0.001 * ft3.y //tiny = 0.000001 * len_eq_zero; = ft3.x
ft1.x += ft3.x //len = len + tiny;

ft2.xy /= ft1.xx // vec2 = vec / len;
ft1.y = pow(ft1.x, FX_fisheye) // r = pow(len, scaledPower);
ft2.xy *= ft1.yy // coords = center + (r * vec2 * center);
ft2.xy *= fc0.ww
ft2.xy += fc0.ww

ft1.x = ft1.y >= 1
ft0.xy *= ft1.xx
ft1.y = ft1.y < 1
ft2.xy *= ft1.yy
ft0.xy += ft2.xy
#endif // ENABLE_fisheye

/*** Move the texture coordinates into the sub-texture space ***/
ft0.xyzw *= Tex_wh
ft0.xy += Tex_u0v0

// Get the texture pixel using ft0.xy as the coordinates
ft1 = tex<2d>(ft0, fs0)

/*** ft1 == (r, g, b, a) ***/
// Now de-multiply the color values that Flash pre-multiplied
// TODO: De-multiply the color values BEFORE texture atlasing
ft3.z = ft1.w != 0 //int alpha_neq_zero = (alpha != 0); alpha_neq_zero is ft3.z
ft1.w += 0.001 //alpha = alpha + 0.001; Avoid division by zero by making sure alpha != 0
ft1.xyz /= ft1.www // rgb /= alpha; 0.001 is smaller than 1/256 so it won't affect output rounding.
ft1.xyz *= ft3.zzz // rgb *= alpha_neq_zero; Make rgb 0 if alpha was 0. Is this necessary?

// Clamp the color
ft1 = sat(ft1)

/*** Color effect ***/
#if ENABLE_color || ENABLE_brightness
// TODO: probably more of this section can be simplified when either color or brightness is disabled
// compute h, s, v														dst		= ft1
//				float v = max(r, max(g, b));
ft2.z = max(ft1.y, ft1.z) //float v = max(dst.g, dst.b);				v		= ft2.z
ft2.z = max(ft1.x, ft2.z) //v = max(dst.r, v);

//				float vmin = min(r, min(g, b);
//				float span = v - vmin;
ft2.x = min(ft1.y, ft1.z) //float vmin =  min(dst.g, dst.b);			vmin	= ft2.x
ft2.x = min(ft1.x, ft2.x) //vmin = min(dst.r, vmin);
ft2.w = ft2.z - ft2.x //float span = v - vmin;                          span	= ft2.w

//				if (span == 0.0) {
//					h = s = 0.0;
//				} else {
//					if (r == v) h = 60.0 * ((g - b) / span);
//					else if (g == v) h = 120.0 + (60.0 * ((b - r) / span));
//					else if (b == v) h = 240.0 + (60.0 * ((r - g) / span));
//				}
ft5.x = ft2.w == 0 //int span_eq_zero = (span == 0);		span_eq_zero= ft5.y
ft2.y = ft2.w != 0 //int span_not_zero = (span != 0.0); span_not_zero	= ft2.y
ft3.x = ft1.x == ft2.z //int r_eq_v = (dst.r == v);				r_eq_v	= ft3.x
ft4.x = ft1.x != ft2.z //int r_not_v = (dst.r != v);				r_not_v	= ft4.x
ft3.y = ft1.y == ft2.z //int g_eq_v = (dst.g == v);				g_eq_v	= ft3.y
ft3.y *= ft4.x //g_eq_v = g_eq_v * r_not_v
ft3.z = ft1.z == ft2.z //int b_eq_v = (dst.b == v);				b_eq_v	= ft3.z
ft4.y = ft3.x + ft3.y //int not_g_eq_v_or_r_eq_v = r_eq_v + g_eq_v	not_g_eq_v_or_r_eq_v	= ft4.y
ft4.y = ft4.y == 0 //not_g_eq_v_or_r_eq_v = (not_g_eq_v_or_r_eq_v == 0)
ft3.z *= ft4.y //b_eq_v = b_eq_v * not_g_eq_v_or_r_eq_v	// (b==v) is only valid when the other two are not

ft3.w = 0.001 * ft5.x //tiny = 0.000001 * span_eq_zero;			tiny	= ft3.w
ft2.w += ft3.w //span = span + tiny;					Avoid division by zero, span != 0

ft3.xyz *= ft2.yyy //{r,g,b}_eq_v = {r,g,b}_eq_v * span_not_zero;

ft4.x = 60 / ft2.w //float 60_div_span = 60 / span;		60_div_span	= ft4.x
ft4.y = ft1.y - ft1.z //float h_r_eq_v = dst.g - dst.b;		h_r_eq_v	= ft4.y
ft4.y *= ft4.x //h_r_eq_v = h_r_eq_v * 60_div_span;
ft4.y *= ft3.x //h_r_eq_v = h_r_eq_v * r_eq_v;

ft4.z = ft1.z - ft1.x //float h_g_eq_v = dst.b - dst.r;		h_g_eq_v	= ft4.z
ft4.z *= ft4.x //h_g_eq_v = h_g_eq_v * 60_div_span;
ft4.z += 120 //h_g_eq_v = h_g_eq_v + 120;
ft4.z *= ft3.y //h_g_eq_v = h_g_eq_v * g_eq_v;

ft4.w = ft1.x - ft1.y //float h_b_eq_v = dst.r - dst.g;		h_b_eq_v	= ft4.w
ft4.w *= ft4.x //h_b_eq_v = h_b_eq_v * 60_div_span;
ft4.w += 240 //h_b_eq_v = h_b_eq_v + 240;
ft4.w *= ft3.z //h_b_eq_v = h_b_eq_v * b_eq_v;

/*** ft2 == (h, s, 2l) ***/

// Twice lightness into ft2.z
ft2.w = ft2.z - ft2.x // want real span back, without tiny added
ft2.z += ft2.x // float l_times2 = v + vmin

// Hue into ft2.x
ft2.x = ft4.y		 //float h = h_r_eq_v;							h	= ft2.x
ft2.x += ft4.z //h = h + h_g_eq_v;
ft2.x += ft4.w //h = h + h_b_eq_v;

// Saturation (in HSL colour-space) into ft2.y
//				float c = 1 - abs(l_times2 - 1)
//				float s = span / c
ft4.x = 2 - ft2.z // float c = 2 - l_times2
ft5.y = ft2.z < 1 // int l_times2_lt_one = (l_times2 < 1)
ft5.z = ft2.z >= 1 // int l_times2_ge_one = (l_times2 >= 1)
ft4.x *= ft5.z // c = c * l_times2_ge_one
ft5.y *= ft2.z // float d = l_times2 * l_times2_lt_one
ft4.x += ft5.y // c = c + d
ft5.y = ft4.x == 0 // prevent division by zero (happens for zero or 100% lightness)
ft4.x += ft5.y
ft2.y = ft2.w / ft4.x // float s = span / c
ft2.y = sat(ft2.y) // should be already?

//				h = mod(h + hueShift, 360.0);
#if ENABLE_color
ft2.x += FX_color //h = h + hueShift;
#endif // ENABLE_color
ft2.x /= 360 //h = h / 360;
ft2.x = frc(ft2.x) //h = frc h;
ft2.x *= 360 //h = h * 360;

//				if (h < 0.0) h += 360.0;
ft4.y = ft2.x < 0 //int h_lt_0 = (h < 0.0);					h_lt_0	= ft4.y
ft4.x = 360 * ft4.y //float hh = 360 * h_lt_0;						hh	= ft4.x
ft2.x += ft4.x //h = h + hh;

// Add to or subtract from lightness in accordance with FX_brightness...
// If FX_brightness>=0 then add that as fraction of the lightness between current and 100%.
// If FX_brightness<0 then subtract that as fraction of lightness between current and zero.
// The idea is that as FX_brightness heads towards 1, the lightness will reach towards 100%.
// And as FX_brightness heads towards -1, the lightness will reach towards zero.
#if ENABLE_brightness
ft3.x = FX_brightness
ft3.y = ft3.x < 0
ft3.z = ft3.x >= 0
ft4.x = 2 - ft2.z
ft3.z *= ft4.x
ft3.z *= ft3.x
ft3.y *= ft2.z
ft3.y *= ft3.x
ft2.z += ft3.y
ft2.z += ft3.z
#endif // ENABLE_brightness

//				int i = int(floor(h / 60.0));
//				float f = (h / 60.0) - float(i);
ft3.x = ft2.x / 60 //float h_div_60 =  h / 60;			h_div_60	= ft3.x
ft3.y = frc(ft3.x) //float f = frc(h_div_60);							f	= ft3.y
ft3.x -= ft3.y //float i = h_div_60 - f;						i	= ft3.x

/***   float c = 1 - abs(l_times2 - 1)  ***/
ft4.x = 2 - ft2.z
ft5.y = ft2.z < 1
ft5.z = ft2.z >= 1
ft4.x *= ft5.z
ft5.y *= ft2.z
ft4.x += ft5.y

//				float p = (l_times2 - c*s)/2;
//				float q = p + c*s*(1 - f);
//				float t = p + c*s*f
//				float v = p + c*s
/*** ft5.xyzw = [v, q, t, p] ***/
ft4.x *= ft2.y // c * s
ft5.x = ft4.x
ft5.y = 1 - ft3.y // 1 - f
ft5.y *= ft4.x // c * s * (1-f)
ft5.z = ft4.x * ft3.y // c * s * f
ft5.w = ft2.z - ft4.x // (l*2 - c*s)
ft5.w /= 2 // (l*2 - c*s)/2
ft5.xyz += ft5.www

/*** FIX i to be an integer on Intel Graphics 3000 with Chrome Pepper Flash ***/
ft3.x += 0.001 // fix i?
ft3.y = frc(ft3.x) // fix i?
ft3.x -= ft3.y // fix i?

ft3.y = ft3.x == 0 //int i_eq_0 = (i == 0);					i_eq_0	= ft3.y
ft3.y *= 6 //i_eq_0 = i_eq_0 * 6;
ft3.x += ft3.y //i = i + i_eq_0;  -- Now i is only 1,2,3,4,5, or 6

ft3.y = ft3.x == 1 //int i_eq_1 = (i == 1);					i_eq_1	= ft3.y
ft3.z = ft3.x == 2 //int i_eq_2 = (i == 2);					i_eq_2	= ft3.z
ft3.w = ft3.x == 3 //int i_eq_3 = (i == 3);					i_eq_3	= ft3.w
ft4.x = ft3.x == 4 //int i_eq_4 = (i == 4);					i_eq_4	= ft4.x
ft4.y = ft3.x == 5 //int i_eq_5 = (i == 5);					i_eq_5	= ft4.y
ft4.z = ft3.x == 6 //int i_eq_6 = (i == 6);					i_eq_6	= ft4.z

// Write to ft7.w ?
//				if (i == 6) dst.rgb = float3(v, t, p);
ft7.xyz = ft4.zzz * ft5.xzw //ft7 = i_eq_6 * ft5.xzw

//				else if (i == 1) dst.rgb = float3(q, v, p);
ft6.xyz = ft3.yyy * ft5.yxw //ft6 = i_eq_1 * ft5.yxw
ft7.xyz += ft6.xyz //ft7 = ft7 + ft6

//				else if (i == 2) dst.rgb = float3(p, v, t);
ft6.xyz = ft3.zzz * ft5.wxz //ft6 = i_eq_2 * ft5.wxz
ft7.xyz += ft6.xyz //ft7 = ft7 + ft6

//				else if (i == 3) dst.rgb = float3(p, q, v);
ft6.xyz = ft3.www * ft5.wyx //ft6 = i_eq_3 * ft5.wyx
ft7.xyz += ft6.xyz //ft7 = ft7 + ft6

//				else if (i == 4) dst.rgb = float3(t, p, v);
ft6.xyz = ft4.xxx * ft5.zwx //ft6 = i_eq_4 * ft5.zwx
ft7.xyz += ft6.xyz //ft7 = ft7 + ft6

//				else if (i == 5) dst.rgb = float3(v, p, q);
ft6.xyz = ft4.yyy * ft5.xwy //ft6 = i_eq_5 * ft5.xwy
ft7.xyz += ft6.xyz //ft7 = ft7 + ft6


ft1.xyz = sat(ft7.xyz)			// Move the shifted color into ft1
#endif // ENABLE_color || ENABLE_brightness

/*** Ghost effect ***/
#if ENABLE_ghost
ft1.w *= FX_ghost
#endif // ENABLE_ghost

/*** Flash-style pre-multiplied alpha **/
ft1.xyz *= ft1.www

/*** Output color ***/
oc = ft1
